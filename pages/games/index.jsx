import Head from "next/head";
import Web3Modal from "web3modal";
import { ethers, providers } from "ethers";
import { useEffect, useRef, useState } from "react";
import GameCard from "../../components/Cards/GameCard";
import Link from "next/link";

const Games = () => {
  // walletConnected keep track of whether the user's wallet is connected or not
  const [walletConnected, setWalletConnected] = useState(false);
  // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open
  const web3ModalRef = useRef();
  // ENS
  const [ens, setENS] = useState("");
  // Save the address of the currently connected account
  const [address, setAddress] = useState("");

  const setENSOrAddress = async (address, web3Provider) => {
    // Lookup the ENS related to the given address
    var _ens = await web3Provider.lookupAddress(address);
    // If the address has an ENS set the ENS or else just set the address
    if (_ens) {
      setENS(_ens);
    } else {
      setAddress(address);
    }
  };

  const getProviderOrSigner = async () => {
    // Connect to Metamask
    // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    // If user is not connected to the Goerli network, let them know and throw an error
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 5) {
      window.alert("Change the network to Goerli");
      throw new Error("Change network to Goerli");
    }
    const signer = web3Provider.getSigner();
    // Get the address associated to the signer which is connected to  MetaMask
    const address = await signer.getAddress();
    // Calls the function to set the ENS or Address
    await setENSOrAddress(address, web3Provider);
    return signer;
  };

  /*
    connectWallet: Connects the MetaMask wallet
  */
  const connectWallet = async () => {
    try {
      // Get the provider from web3Modal, which in our case is MetaMask
      // When used for the first time, it prompts the user to connect their wallet
      await getProviderOrSigner(true);
      setWalletConnected(true);
    } catch (err) {
      console.error(err);
    }
  };

  const renderButton = () => {
    if (walletConnected) {
      <div>Wallet connected</div>;
    } else {
      return (
        <button onClick={connectWallet} className={"w-[200px]"}>
          Connect your wallet
        </button>
      );
    }
  };

  // useEffects are used to react to changes in state of the website
  // The array at the end of function call represents what state changes will trigger this effect
  // In this case, whenever the value of `walletConnected` changes - this effect will be called
  useEffect(() => {
    // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet
    if (!walletConnected) {
      // Assign the Web3Modal class to the reference object by setting it's `current` value
      // The `current` value is persisted throughout as long as this page is open
      web3ModalRef.current = new Web3Modal({
        network: "goerli",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
    }
  }, [walletConnected]);

  return (
    <div className="">
      <Head>
        <title>DAM || HOME </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col justify-center items-center">
        <div className="w-full grid grid-cols-3 justify-center p-5  bg-black h-[100px] md:h-[150px] text-white">
          {/* first col */}
          <div className="w-full h-full grid grid-rows-2 ">
            <h1 className="place-self-center">Player ID</h1>
            <h1 className="place-self-center">{ens ? ens : address}</h1>
          </div>
          {/* second col */}
          <div className="w-full h-full grid ">
            {/* <h1 className="text-xm  md:text-xl p-2 place-self-center">
              Decentralize Arcade Machine
            </h1> */}
          </div>

          <div className="w-full h-full ">
            <Link href={"https://app.ens.domains/"}>
              <button
                onClick={() => {
                  //https://app.ens.domains/
                  console.log("Sends user to ens domains page");
                }}
                className=" w-full h-full text-sm  p-2 bg-white rounded text-black hover:bg-black hover:text-white"
              >
                Get Custom ID
              </button>
            </Link>
          </div>
        </div>
      </div>

      <div className="min-h-screen flex  items-center w-full justify-evenly -mt-10">
        <GameCard GameImg={`/Flappy`} GameId={1} GameName={"FlappyBird"} />
      </div>
    </div>
  );
};

export default Games;
